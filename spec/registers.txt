NOTE: Based on Intel 8086 registers  
Source: https://en.wikipedia.org/wiki/Intel_8086#Registers_and_instruction


====================
Main Registers
====================  
Main registers are used for general storage of quick-access data (like operands).  
Each consists of two 8-bit registers: (REGISTER)L(ow) and (REGISTER)H(igh) (e.g., AL(ow), AH(igh)).

* **AX** → Primary  
  * AL, AH  
* **BX** → Base  
  * BL, BH  
* **CX** → Counter  
  * CL, CH  
* **DX** → Extended access  
  * DL, DH  

====================
Index Registers
====================  
Index registers store positional information, such as the current position of the stack.

* **SI** → Source Index  
* **DI** → Destination Index  
* **BP** → Base Pointer  
* **SP** → Stack Pointer  

====================
Instruction Pointer
====================  
The instruction pointer shows the current position in the instruction stream.

* **IP** → Instruction Pointer (Program counter)

====================
Segment Registers
====================  
Segment registers store the starting points of each memory segment.  
To calculate the **physical address** of a memory segment:  
`physical_address = (segment_register * 16) + offset`  
For example, the sixth address in the code segment would be:  
`(CS * 16) + 6`.

* **CS** → Code Segment  
* **DS** → Data Segment  
* **ES** → Extra Segment  
* **SS** → Stack Segment  

For more information on memory segments, see "memory/segments.txt".

====================
Status Register (Flags)
====================  
The status register holds the active flags, useful for storing information like comparison and equality results.  
It is 16 bits wide, with one byte per flag.  
For detailed flag explanations, see "flags.txt".

* **Bits 15-12**: None  
* **Bit 11**: **OF**  
* **Bit 10**: **DF**  
* **Bit 9**: **IF**  
* **Bit 8**: **TF**  
* **Bit 7**: **SF**  
* **Bit 6**: **ZF**  
* **Bit 5**: None  
* **Bit 4**: **AF**
* **Bit 3**: None  
* **Bit 2**: **PF**
* **Bit 1**: None  
* **Bit 0**: **CF**

